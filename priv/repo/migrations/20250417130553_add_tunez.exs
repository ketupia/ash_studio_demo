defmodule AshStudioDemo.Repo.Migrations.AddTunez do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:tunez_tracks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text
      add :duration_seconds, :bigint

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :album_id, :uuid, null: false
    end

    create table(:tunez_artists, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :biography, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:tunez_albums, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:tunez_tracks) do
      modify :album_id,
             references(:tunez_albums,
               column: :id,
               name: "tunez_tracks_album_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:tunez_albums) do
      add :name, :text, null: false
      add :year_released, :bigint, null: false
      add :cover_image_url, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :artist_id,
          references(:tunez_artists,
            column: :id,
            name: "tunez_albums_artist_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:tunez_albums, [:name, :artist_id],
             name: "tunez_albums_unique_album_names_per_artist_index"
           )
  end

  def down do
    drop_if_exists unique_index(:tunez_albums, [:name, :artist_id],
                     name: "tunez_albums_unique_album_names_per_artist_index"
                   )

    drop constraint(:tunez_albums, "tunez_albums_artist_id_fkey")

    alter table(:tunez_albums) do
      remove :artist_id
      remove :updated_at
      remove :inserted_at
      remove :cover_image_url
      remove :year_released
      remove :name
    end

    drop constraint(:tunez_tracks, "tunez_tracks_album_id_fkey")

    alter table(:tunez_tracks) do
      modify :album_id, :uuid
    end

    drop table(:tunez_albums)

    drop table(:tunez_artists)

    drop table(:tunez_tracks)
  end
end
